using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace ConsoleApplication2
{
    class IO
    {
        public int initCT;
        public int remCT;
        public int beginTime;
        public int endTime;
        public char type;
        public string descriptor;
    }
    class Process
    {
        public int initCT;
        public int remCT;
        public List<IO> ioList = new List<IO>();
        public bool finished = false;
    }
    class Application
    {
        public int PIDNum;
        public int numProc;
        public int procRem;
        public List<Process> procList = new List<Process>();
        public bool finished = false;
    }
    class Program
    {
        //Functions
        static int FindCycleTime(string s)      //Determines cycle time in our meta data string
        {
            int len = s.Length;
            int tempInt = 0;
            for (int i = 0; i < len; i++)
            {
                if (s[i] == ')' && (i + 2) < len)
                {
                    tempInt = (int)(s[i + 1] - 48) * 10;
                    tempInt += (int)(s[i + 2] - 48);
                }
                else if (s[i] == ')')
                {
                    tempInt = (int)(s[i + 1] - 48);
                }
            }
            return tempInt;
        }

        static string FindDescriptor( string s) //Determines string value between ()'s in meta data string
        {
            int len = s.Length, x=0;
            string tempString = null;
            for (int i = 0; i < len; i++)
            {
               if( s[i]=='(' )
               {
                   x = i+1;         //Set the tempInt to the letter after (
                   while (s[x] != ')')  //Iterate through and get characters between ()
                   {
                       tempString += s[x];
                       x++;
                   }
               }
            }
            return tempString;//Return the value (ie "monitor" or "keyboard"
        }

        static void copyProcess(Process src, Process dest)
        {
            dest.initCT = src.initCT;
            dest.remCT = src.remCT;
            for (int x = 0; x < src.ioList.Count; x++)
            {
                IO newIO = new IO();
                newIO.initCT = src.ioList[x].initCT;
                newIO.remCT = src.ioList[x].remCT;
                newIO.type = src.ioList[x].type;
                newIO.descriptor = src.ioList[x].descriptor;
                dest.ioList.Add(newIO);
            }
        }
        static void copyApplication(Application src, Application dest)
        {
            dest.PIDNum = src.PIDNum;
            dest.numProc = src.numProc;
            dest.procRem = src.procRem;
            for (int x = 0; x < src.procList.Count; x++)
            {
                Process newProcess = new Process();
                copyProcess(src.procList[x], newProcess);  //Store source process in tmp
                dest.procList.Add(newProcess);
            }
        }

        //MAIN PROGRAM
        static void Main(string[] args)
        {
            //Declare all variables
                char lastOp = 'S';                          //Stores a value of last operation
                bool appStarted = false, procStarted = false;
                int appIndex = 0, procIndex = 0, tempInt = 0;            //Application and process index variables
            //Declaring Lists/Classes!
                List<string> ourData = new List<string>();  //Temporary list to hold all meta data
                List<Application> ourAppList = new List<Application>();
            //string dataFile = File.ReadAllText(@"C:\Users\team8\Desktop\exampleFile.txt");//Used on cpe lab comp
            string dataFile = "S(start)0; A(start)0; P(run)13; I(keyboard)5; P(run)6; O(monitor)5; P(run)5; I(hard drive)5; P(run)7; A(end)0; A(start)0; P(run)10; I(keyboard)5; P(run)7; O(hard drive)5; P(run)15; A(end)0; A(start)0; P(run)13; I(hard drive)5; P(run)14; O(hard drive)5; P(run)13; I(hard drive)5; P(run)10; S(end)0.";
            //ABOVE IS AN EXAMPLE^ WE WILL FIX LATER


            //Data is read into a string list here ------------------------------
            string x = dataFile;
            int index1 = 0, index2 = x.IndexOf(';');
            while (index2 != -1)
            {
                int q = index2 - index1;
                //Console.WriteLine(x.Substring(index1, q));//Debugging
                string temp = x.Substring(index1, q);
                ourData.Add(temp);
                index1 = index2 + 1;
                index2 = x.IndexOf(';', index2 + 1);
            }
            string temp2 = x.Substring(index1);
            ourData.Add(temp2);//Adds the final System End
            //End of data read in loop (to a list of strings)-------------------


            Application tempApp = new Application();
            Process tempProc = new Process();
            
            //Begin to store data in proper structures (ourAppList)
            foreach (string currentLine in ourData)
            {
                IO tempIO = new IO();
                Process tempProc2 = new Process();
                Application tempApp2 = new Application();
                //Console.WriteLine(currentLine);//Debugging (Displays all elements stored in our list)
                if (currentLine[0] == 'S' || currentLine[1] == 'S') //Handling System Operation
                {
                    if (procStarted)
                    {
                        copyProcess(tempProc, tempProc2);
                        tempApp.procList.Add(tempProc2);
                        procStarted = false;
                    }
                    if (appStarted)
                    {
                        tempInt = tempApp.procList.Count;
                        tempApp.numProc = tempInt;
                        tempApp.procRem = tempInt;
                        copyApplication(tempApp, tempApp2);
                        ourAppList.Add(tempApp2);
                        appStarted = false;
                    }
                }

                if (currentLine[0] == 'A' || currentLine[1] == 'A') //Handling Application Operation
                {
                    if (FindDescriptor(currentLine) == "end")         //If this is the end of an application, store values into list
                    {
                        if (procStarted)
                        {
                            copyProcess(tempProc, tempProc2);
                            tempApp.procList.Add(tempProc2);
                            procStarted = false;
                        }
                        tempInt = tempApp.procList.Count;
                        tempApp.numProc = tempInt;
                        tempApp.procRem = tempInt;
                        copyApplication(tempApp, tempApp2);
                        ourAppList.Add(tempApp2);
                        appStarted = false;
                    }
                    if (FindDescriptor(currentLine) == "start")         //If start of an app. begin setting data for it
                    {
                        appStarted = true;
                        tempApp.procList = new List<Process>();
                        tempApp.PIDNum = appIndex;
                        appIndex++;     //Increment number of applications
                    }
                }

                if (currentLine[0] == 'P' || currentLine[1] == 'P') //Handling Process Operation
                {
                    if( procStarted )
                    {
                        copyProcess(tempProc, tempProc2);
                        tempApp.procList.Add(tempProc2);
                        procStarted = false;
                    }
                    if( procStarted == false)
                    {
                        tempInt = FindCycleTime(currentLine);
                        tempProc.initCT = tempInt;
                        tempProc.remCT = tempInt;
                        tempProc.ioList = new List<IO>();
                        procStarted = true;
                    }
                }

                if (currentLine[0] == 'I' || currentLine[1] == 'I') //Handling Input Operation
                {
                    tempInt = FindCycleTime(currentLine);
                    tempIO.initCT = tempInt;
                    tempIO.remCT = tempInt;
                    tempIO.type = 'I';
                    tempIO.descriptor = FindDescriptor(currentLine);
                    tempProc.ioList.Add(tempIO);        //Add to the last current running process
                }

                if (currentLine[0] == 'O' || currentLine[1] == 'O') //Handling Output Operation
                { 
                    tempInt = FindCycleTime(currentLine);
                    tempIO.initCT = tempInt;
                    tempIO.remCT = tempInt;
                    tempIO.type = 'O';
                    tempIO.descriptor = FindDescriptor(currentLine);
                    tempProc.ioList.Add(tempIO);        //Add to the last current running process
                }
            }

            //Start main program
                //Insert stuff here

            //THE FOLLOWING IS USED IN TESTING TO VIEW OUR "ourAppList" structure to verify it works!!!
            foreach(Application a in ourAppList)
            {
                Console.WriteLine("PID #" + a.PIDNum);
                Console.WriteLine("NumProc" + a.numProc);
                Console.WriteLine("ProcRem" + a.procRem);
                for (tempInt = 0; tempInt < a.procList.Count; tempInt++ )
                {
                    Console.WriteLine("\t"+ "Init Ct @ " +tempInt + " = " + a.procList[tempInt].initCT);
                    Console.WriteLine("\t" + "Rem  Ct @ " + tempInt + " = " + a.procList[tempInt].remCT);
                    for (int abc = 0; abc < a.procList[tempInt].ioList.Count; abc++ )
                    {
                        Console.WriteLine("\t" + "\t" + "\t" + a.procList[tempInt].ioList[abc].initCT);
                        Console.WriteLine("\t" + "\t" + "\t" + a.procList[tempInt].ioList[abc].remCT);
                        Console.WriteLine("\t" + "\t" + "\t" + a.procList[tempInt].ioList[abc].type);
                        Console.WriteLine("\t" + "\t" + "\t" + a.procList[tempInt].ioList[abc].descriptor);
                    }
                }
            }
            
            Console.ReadKey();
        }
    }
}//End of Console app
